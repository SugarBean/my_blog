[{"title":"","date":"2017-02-23T09:12:58.611Z","path":"2017/02/23/如何搭建自己hexo博客/","text":"如何在hexo上搭建自己的博客 本节教程只针对Windows用户 安装Git下载msysgit并执行即可完成安装。 安装Node.js在 Windows 环境下安装 Node.js 非常简单，仅须下载安装文件并执行即可完成安装。 安装hexo利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash） npm install -g hexo 创建hexo文件夹安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 hexo init 安装依赖包 npm install 本地查看现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:8080看看。 hexo generatehexo server 好了，至此，本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。 tips1.hexo现在支持更加简单的命令格式了，比如： hexo g == hexo generatehexo d == hexo deployhexo s == hexo serverhexo n == hexo new 2.在你更新文章以后，最好先clean一下 hexo clean","tags":[]},{"title":"","date":"2017-02-23T08:03:26.324Z","path":"2017/02/23/HTTP那些事/","text":"HTTP那些事 一次完整的HTTP事物是怎样的一个过程？ 基本流程：a.域名解析b.发起TCP的3次握手c.建立TCP连接后发起的http请求d.服务端响应http请求，浏览器得到html代码e.浏览器解析html代码，并请求html代码中的资源f.浏览器对页面进行渲染呈现给用户 HTTP常用状态码有哪些 200 OK 301 Moved Permanently 302 Found 304 Not Modified 307 Temporary Redirect 400 Bad Request 401 Unauthorized 403 Forbidden 404 Not Found 410 Gone 500 Internal Server Error 501 Not Implemented 100 Continue初始的请求已经接受，客户应当继续发送请求的其余部分 101 Switching Protocols服务器将遵从客户的请求转换到另外一种协议 200 OK一切正常，对GET和POST请求的应答文档跟在后面 201 Created服务器已经创建了文档，Location头给出了它的URL。 202 Accepted已经接受请求，但处理尚未完成。 203 Non-Authoritative Information文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝 204 No Content没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的 205 Reset Content没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容 206 Partial Content客户发送了一个带有Range头的GET请求，服务器完成了它 300 Multiple Choices客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。 301 Moved Permanently客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。 302 Found类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。 303 See Other类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取 304 Not Modified客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。 305 Use Proxy客户请求的文档应该通过Location头所指明的代理服务器提取 HTTPS是如何实现加密？以下是理论部分，仅供理解参考，如果要粘代码，网上会有很多，此处不再提供 关于https加密：https是在http的基础上多了一次协议ssl，该协议用来给传输的内容进行加密https加密流程：1，客户端将SSL 协议的版本号、加密算法的种类，产生的随机数A等信息传给服务器2，服务器选择其中的一种组合作为加密方式，同时将自己的证书、公钥、另外一个随机数B一起传给客户端3，客户端验证客户端返回的信息（包括证书，签名，域名等），验证成功，则生成对称加密密钥S，用公钥加密后返回给服务器4，服务器用私钥将这段密钥解密。得到对称密钥S，并用此密钥加密一段握手消息返回给客户端5，客户端收到握手消息，用对称密钥解密，验证成功，则握手成功。 单向加密和双向加密：单向加密：服务端有一套（两份）证书：含公钥和私钥的jks文件（此文件自己保留），和只含公钥的ser文件，其中ser文件是要给客户端的双向加密：除了具有单向加密的特性（服务端验证客户端），客户端也有一套（两份）证书来验证服务端消息，对于android来说，分为bks文件（含公钥和私钥，自己保留）、ser文件（含公钥给服务端） 关系：1，服务端生成jks文件，并导出只含公钥的ser文件给服务端2，客户端用ser文件生成自己的bks文件，用来验证服务端的消息3，客户端自己生成pfx文件，并导出只含公钥的ser文件给服务端4，服务端用客户端的ser文件进行验证来自客户端的消息 用到的概念和变量：keytool– 用来生成证书的，jks、bks、cer、pfx等keystore– 用来储存证书的，初始化时传入证书类型,keystor的初始化：keystore.load(inputStream, passWord);或keystore.load(null),keystroe.setCertificateEntry(alias,certificate);certificateFactory– 证书工厂，通常通过传入参数（X509）生成，用来读取本地的证书数据流，并生成相应的证书SSLSocketFactory–非常重要，是所有框架和网络请求从http转https的关键所在，例如：okhttp:直接执行okhttp.setSslSocketFacotry(),volley:new RequestQueue(new DiskBasedCache(),new BasicNetwork(new HurlStack(null, sslSocketFactory)));SSLContext–用来得到sslSocketFactory sslContext.getSocketFactory();自身生成方式：SSLContext.getInstance(“TLS”);keyManager[] trustManager[] –用来初始化sslContext：sslContext.init(keyManager[], trustManger[], new SecureRandom()),其中，忽略证书验证二者皆可为null，单向认证只要trustManger[],双向认证二者都要，new SecureRandom()可以为null;(如果alias不为空，需要通过new KeyManager())KeyManagerFactory TrustManagerFactory– 用来生成keyManager[]和trustManager[],自己通过KeyStore.getInstance(type) 生成，通过keystore变量初始化：keyManagerFactory.init(keystore,password);其中，type是bks等，默认getDefaultType()是jks； 附： Windows IIS下的数字证书格式一般为。pfx Java tomcat 下的数字证书格式一般为.jks或.store Apache和nginx一般是.pem 证书请求文件一般是.csr 证书公钥文件一般是.cer或.crt 证书私钥文件一般是.key 服务器提供的cer证书中包含公钥，而android的keystore中需要bks格式的信任证书，转换方法如下： 转换命令说明： keytool -importcert -v -trustcacerts -alias 位置1 \\ -file 位置2 \\ -keystore 位置3 -storetype BKS \\ -providerclass org.bouncycastle.jce.provider.BouncyCastleProvider \\ -providerpath 位置4 -storepass 位置5 位置1:是个随便取的别名 位置2:cer或crt证书的全地址 位置3:生成后bks文件的位置,建议写全地址 位置4:上面下载JCE Provider包的位置 位置5:生成后证书的密码 转换完整示例 keytool -importcert -v -trustcacerts -alias my12306 -file C:\\Users\\Administrator\\Desktop\\证书\\srca.cer -keystore C:\\Users\\Administrator\\Desktop\\证书\\srca.bks -storetype BKS -providerclass org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath C:\\Users\\Administrator\\Desktop\\证书\\bcprov-jdk15on-146.jar -storepass 123456 生成trustKeyStore后，将bks证书通过流的方式读取出来，并初始化trustKeyStore，用这个keysore初始化trustMangerFactory并生成相应的trustManager。","tags":[]},{"title":"","date":"2017-02-08T13:24:20.042Z","path":"2017/02/08/Android配置环境/","text":"Android环境配置一、java环境的搭建:工具JDK 搭建步骤： java环境配置步骤 1. 首先，如果你还没有安装JDK，那么去oracle官方网站下载最新的Java se sdk 2. 打开下载的安装文件，出现如下界面，一步一步默认下去，当然安装的位置你也可以自定义，比如配图默认安装到C:\\Program Files\\Java\\jdk1.8.0_25\\，你可以点击更改更换到你想安装的任意位置，比如我就把它安装到F盘。 3. 等其安装完成后，又出来一个Java安装，不过细心的朋友应该可以看出，这次是安装的jre也就是Java 运行环境，一样的安装它，不过在此建议你更改安装目录到你刚才安装JDK的上级目录位置去，这样便于管理，你若不更改那么就会执行默认安装，也就是安装到C:\\Program Files\\Java\\jre1.8.0_25\\去 4. 出现如配图界面，则表示Java环境已经成功安装了 ![加载失败](img/anzhuang.jpg &quot;Optional title&quot;) 环境配置1.ANDROID_HOME F:\\Program Files\\adt\\sdk（对应sdk路径） 2.path %ANDROID_HOME%\\platform-tools; 3.path %ANDROID_HOME%\\tools; 二、C++环境搭建这一步是在需要的时候再安装 三、Android ADT环境的搭建1.先新建一个英文路径的文件夹； 2.ionic start myapp tabs使用这个命令创建一个App工程； 3.ionic serve 使用这个命令启动应用，会自动在浏览器中打开应用。 打包4.ionic platform add android这个命令是为工程添加平台编译选项； 5.ionic build android进行编译，使用工具打开工程，编译，运行。","tags":[]},{"title":"","date":"2017-01-09T11:53:03.765Z","path":"2017/01/09/01/","text":"搭建Hexo博客中碰到的坑 搭建Hexo博客中碰到的坑 前段时间上网查资料时看到了好几个很不错的个人博客，感觉很棒，自己也想搭建一个玩一下，刚好在万网查到自己的域名niujiajun.com没被注册，就搜集资料准备开干了。虽然现在早就不再是博客的时代了，但本来也没想着靠这个干什么，只是说能有个专属自己地方能分享记录自己的思考，资源和学习成果，可以把琐碎的东西总结归纳然后写出来，毕竟写出来&gt;说出来&gt;想出来。##不简单的介绍 好了费话不多说了，开始复盘博客搭建的整个过程。首先简单介绍一下，我的博客由Hexo作为博客框架，Github提供的300M免费空间作为服务器，Next作为博客的主题。Next主题中又集成了多说的评论、分享系统和热评文章功能，百度统计服务和Swiftype站内搜索服务。反正就是一锅乱炖吧，其实我也不太了解这些功能和服务，就一步步按教程走就好了。整个搭建耗时4天，其实1天就能把基本的东西搭建好，剩下的三天都在处理问题和完善细节。如题，这篇文章的目的并不是讲解如何搭建一个Hexo博客，而是记录我在搭建博客过程中遇到的问题，并给出我的解决方法。 搭建博客的准备先放几个Windows环境下搭建Hexo博客的教程： 史上最详细“截图”搭建Hexo博客并部署到Github 如何利用GitHub Pages和Hexo快速搭建个人博客 hexo干货系列：（一）hexo+gitHub搭建个人独立博客 创建GitHub技术博客全攻略 使用hexo在github上搭建独立博客 Hexo搭建Github静态博客 Hexo搭建博客之博客搜索引擎推广这类教程网上一搜一大把，这里给的是我觉得写得可以的。还有一个比较作弊一些的自动化搭建工具： HEXO 便携版 这个是我快搭好的时候发现的，不喜欢太傻瓜式的，且不想前功尽弃，所以我是没用过的，疗效如何我也不知道。然后如果每个教程都大概看一下的话，可以发现每个教程的步骤不太一样，这就很讨厌了。其实上上周我就尝试过搭建，就是因为看的教程不对，所以刚开始就碰到了问题，于是放弃，拖了两周又重头再来。可见一个好的教程是成功他妈，下面是我看了几篇教程后自己的步骤： 注册github账号,创建一个yourname.github.io的仓库 买个喜欢的域名 下载Node.js、Git 利用Git安装Hexo，并进行本地测试 部署本地文件到Github进行查看 Github Pages绑定域名 安装Next主题,并进行优化 博客搜索引擎推广曲折的路和路上的坑 路很长，慢慢来。仓库的名字仓库的名字的正确格式是github用户名.github.io,之前没仔细看，随便起了个，果断报错。关于GitGit是Git Bash不是Github更不是Github Shell，是一个命令行工具，长这个样子。","tags":[]}]